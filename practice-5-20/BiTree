#include <iostream>
using namespace std;

typedef struct Node
{//定义二叉树结构
    char data;
    struct Node *lchild,*rchild;
}*BiTree,BiTNode;

void CreateBiTree(BiTree &T)
{//先序创建二叉树
    char ch;
    cin>>ch;
    if(ch=='#') T=NULL;
    else{
        T=new BiTNode;
        T->data=ch;
        CreateBiTree(T->lchild);
        CreateBiTree(T->rchild);
    }
}
void InOrderTraverse(BiTree T)
{//中序遍历
    if(T)
    {
        InOrderTraverse(T->lchild);
        cout<<T->data;
        InOrderTraverse(T->rchild);
    }
}
void PreOrderTraverse(BiTree T)
{//先序遍历
    if(T)
    {
        cout<<T->data;
        PreOrderTraverse(T->lchild);
        PreOrderTraverse(T->rchild);
    }
}
void PostOrderTraverse(BiTree T)
{//后序遍历
    if(T)
    {
        PostOrderTraverse(T->lchild);
        PostOrderTraverse(T->rchild);
        cout<<T->data;
    }
}
void Copy(BiTree T,BiTree &NewT)
{//二叉树的复制
    if(T==NULL){
        NewT=NULL;
        return;
    }else
    {
        NewT=new BiTNode;
        NewT->data=T->data;
        Copy(T->lchild,NewT->lchild);
        Copy(T->rchild,NewT->rchild);
    }
}
int Depth(BiTree T)
{//树的深度
    if(T==NULL)
        return 0;
    else
    {
        int m=Depth(T->lchild);
        int n=Depth(T->rchild);
        if(m>n) return (m+1);
        else return (n+1);
    }
}
int NodeCount(BiTree T)
{//统计二叉树中结点的个数
    if(T==NULL) return 0;
    else return NodeCount(T->lchild)+NodeCount(T->rchild)+1;
}
int LeafCount(BiTree T)
{//统计二叉树中叶子结点的个数
    if(!T) return 0;
    if(!T->lchild &&!T->rchild){//如果二叉树左子树和右子树皆为空,说明该二叉树根节点为叶子节点,加1.
        return 1;
    }else{
        return LeafCount(T->lchild)+LeafCount(T->rchild);
    }
}


//查询某个结点的父节点
BiTree Parent(BiTree bt, char NodeName){
	if (bt){
		if (bt->data == NodeName){
			cout << "该结点为根节点" << endl;
			return NULL;
		}
	}
	if ((bt->lchild->data == NodeName&&bt->lchild != NULL) || (bt->rchild->data == NodeName&&bt->rchild != NULL)){
		return bt;
	}
	else{
		BiTNode*tempP = NULL;
		if (tempP = Parent(bt->lchild, NodeName)){
			return tempP;
		}
		if (tempP = Parent(bt->rchild, NodeName)){
			return tempP;
		}

	}
	return NULL;
}



//查找某个结点
BiTree Search(BiTree bt, char NodeName)
{
	BiTree p;
	if (bt)
	{
		if (bt->data == NodeName)
			return bt;
		if (bt->lchild)
		{
			p = Search(bt->lchild, NodeName);
			if (p)
				return p;
		}
		if (bt->rchild)
		{
			p = Search(bt->rchild, NodeName);
			if (p)
				return p;
		}
	}
	return NULL;
}

int main()
{
    BiTree T;
    //测试例子AB#CD##E##F#GH###
    cout<<"先序遍历输入:"<<endl;
    CreateBiTree(T);
    cout<<"中序遍历输出:";
    InOrderTraverse(T);
    cout<<endl<<"先序遍历输出:";
    PreOrderTraverse(T);
    cout<<endl<<"后序遍历输出:";
    PostOrderTraverse(T);
	cout<<endl;
	char name;
	cout << "输入要查找的结点名：";
	cin >> name;
	BiTree nn = Parent(T, name);
	if (nn){
		cout << name << "的父节点名为：" << nn->data << endl;
		nn = Search(T, name);
		if (nn->lchild){
			cout << name << "的左孩子为：" << nn->rchild->data << endl;
		}
		else{
			cout << name << "无左孩子" << endl;
		}
	}
    cout<<endl<<"树的深度:"<<Depth(T)<<endl;
    cout<<endl<<"二叉树结点的个数:"<<NodeCount(T)<<endl;
    cout<<endl<<"叶子结点的个数:"<<LeafCount(T)<<endl;
   
    return 0;
}
