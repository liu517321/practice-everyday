/*class Node {
    int val;
    Node next = null;

    Node(int val) {
        this.val = val;
    }

    public String toString() {
        return String.format("Node(%d)", val);
    }
}*/

public class List {
    //删除所有的val值
    public static Node removeElements(Node head, int val) {
        Node result = null;
        Node last = null;   // 记录目前 result 中的最后一个结点

        Node cur = head;
        while (cur != null) {
            if (cur.val == val) {
                cur = cur.next;
                continue;
            }

            Node next = cur.next;

            cur.next = null;
            if (result == null) {
                result = cur;
            } else {
                last.next = cur;
            }

            last = cur;

            cur = next;
        }

        return result;
    }
    // 打印
    private static void print(Node head) {
        System.out.println("打印链表：");
        for (Node cur = head; cur != null; cur = cur.next) {
            System.out.print(cur + " --> ");
        }
        System.out.println("null");
    }
    //在pos后插入val值
    private static void pushAfter(Node pos, int val) {
        Node node = new Node(val);

        node.next = pos.next;
        pos.next = node;
    }
    //删除pos后的值
    private static void popAfter(Node pos) {
        pos.next = pos.next.next;
    }
    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        print(head);

        Node pos = head.next.next;
        pushAfter(pos, 100);
        print(head);
        removeElements(head,3);
        print(head);
        // 1, 2, 3, 100, 4
    }

}
