#define NULL 0
#include<iostream>
#include<string.h>
#include<cstdio>
#include<stdlib.h>
#include<stack>
#include<stdio.h>
using namespace std;

typedef char datatype;
typedef struct node
{
	datatype elem;
	struct node *lchild,*rchild;
}BTNode,*BinTree;


//采用先序序列创建二叉树
BinTree CreatBTree_2()
{
	BinTree bt = NULL;
	char ch;
	cin>>ch;
	if(ch !='#')
	{
		bt = new BTNode;
		bt->elem = ch;
		bt->lchild = CreatBTree_2();
		bt->rchild = CreatBTree_2();
	}
	return bt;
}
//删除二叉树
void DelTree(BinTree root) 
{
	if(root != NULL)
	{
		DelTree(root->lchild);
		DelTree(root->rchild);
	}
	free(root);
}

//显示树形结构
void display(BinTree root)
{
	if(root !=NULL)
	{
		cout<<root->elem;
		if(root->lchild !=NULL || root->rchild !=NULL)
		{
			cout<<'(';
			display(root->lchild);
		}
		if(root->rchild !=NULL)
		{
			cout<<',';
			display(root->rchild);
			cout<<')';
		}
	}
}

//前序遍历
void preOrder(BinTree root)
{
	if(root)
	{
		cout<<root->elem;
		preOrder(root->lchild);
		preOrder(root->rchild);
	}
}

//中序遍历
void inOrder(BinTree root)
{
	if(root)
	{
		inOrder(root->lchild);
		cout<<root->elem;
		inOrder(root->rchild);
	}
}
//后序遍历
void postOrder(BinTree root)
{
	if(root)
	{
		postOrder(root->lchild);
		postOrder(root->rchild);
		cout<<root->elem;
	}
}

int maxDepth(BinTree root)
{}

//查询某个结点的父结点
BinTree Parent(BinTree bt,char NodeName)
{
	if(bt)
	{
		if(bt->elem == NodeName)
		{
			cout<<"该结点为根结点"<<endl;
			return NULL;
		}
	}
	if((bt->lchild->lchild == NodeName && bt->lchild !=NULL)||(bt->rchild->elem.name == NodeName && bt->rchild !=NULL))
		return bt;
	else
	{
		BTNode *tempP = NULL;
		if(tempP = Parent(bt->lchild,NodeName))
			return tempP;
		if(tempP = Parent(bt->rchild,NodeName))
			return tempP;
	}
	return NULL;
}

//查找某个结点
BinTree Search(BinTree bt,char NodeName)
{
	BinTree p;
	if(bt)
	{
		if(bt->elem == NodeName)
			return bt;
		if(bt->lchild)
		{
			p = Search(bt->lchild,NodeName);
			if(p)
				return p;
		}
		if(bt->rchild)
		{
			p = Search(bt->rchild,NodeName);
			if(p)
				return p;
		}
	}
	return NULL;
}

//统计二叉树中的结点个数
int Nodes(BinTree bt)
{
	if(bt == NULL)
		return 0;
	else
		return Nodes(bt->lchild)+Nodes(bt->rchild)+1;
}

//输出所有二叉树中的叶子结点
void DispLeaf(BinTree bt)
{
	if(bt != NULL)
	{
		if(bt->lchild == NULL && bt->rchild == NULL)
			cout<<bt<<endl;
		DispLeaf(bt->lchild);
		DispLeaf(bt->rchild);
	}
}


int main()
{
	BinTree root = NULL;

	root = CreatBTree_2();
	cout<<"输出此二叉树："<<endl;
	display(root);
	cout<<"\n 先序排列为："<<endl;
	preOrder(root);

    cout<<"\n 中序排列为："<<endl;
	inOrder(root);

	cout<<"\n 后序排列为："<<endl;
	postOrder(root);

	int num = maxDepth(root);
	cout<<"\n 该二叉树的深度为："<<num<<endl;

	BinTree nn;
	char name;
	cout<<" 输入要查找的结点名：";
	cin>>name;
	nn = Parent(root,name);
	if(nn)
		cout<<name<<"的父结点为："<<nn->elem<<endl;
	nn = Search(root,name);
	if(nn->lchild)
		cout<<name<<"的左孩子为："<<nn->lchild<<endl;
	else
		cout<<"无左孩子"<<endl;
	if(nn->rchild)
		cout<<name<<"的右孩子为："<<nn->rchild<<endl;
	else
		cout<<"无右孩子"<<endl;

	cout<<"此二叉树的结点数为："<<Nodes(root)<<endl;
	cout<<"输出所有的叶子结点："<<DisLeaf(root)<<endl;

	return 0;
}
