import java.util.Arrays;

/**
 * 快速排序
 *选择基准的方法:最左边 left 为基准值
 */
public class QuickSort1 {

    public static void quickSort(int[] array) {
        quickSortInternal(array, 0, array.length - 1);
    }

    // [left, right] 为待排序区间
    private static void quickSortInternal(int[] array, int left, int right) {
        if (left == right) {
            return;
        }
        if (left > right) {
            return;
        }
        // 最简单的选择基准值的方式，选择 array[left] 作为基准值
        // pivotIndex 代表基准值最终停留的下标
        int pivotIndex = partition1(array, left, right);

        //[left, pivotIndex - 1] 都是小于等于基准值的
        // [pivotIndex + 1, right] 都是大于等于基准值的

        quickSortInternal(array, left, pivotIndex - 1);
        quickSortInternal(array, pivotIndex + 1, right);
    }

    /**
     * 用Hoare方法进行partition操作
     * i 与 j 进行相互交换的操作
     * @param array
     * @param left
     * @param right
     * @return
     */
    private static int partition1(int[] array, int left, int right) {
        int i = left;
        int j = right;
        int pivot = array[left];
        while (i < j) {
            while (i < j && array[j] >= pivot) {
                j--;
            }
            while (i < j && array[i] <= pivot) {
                i++;
            }
            swap(array, i, j);
        }
        swap(array, i, left);
        return i;
    }

    /**
     * 用挖坑法做partition操作
     * 不进行交换，进行赋值操作
     * @param array
     * @param left
     * @param right
     * @return
     */
    private static int partition2(int[] array, int left, int right) {
        int i = left;
        int j = right;
        int pivot = array[left];
        while (i < j) {
            while (i < j && array[j] >= pivot) {
                j--;
            }
            array[i] = array[j];
            while (i < j && array[i] <= pivot) {
                i++;
            }
            array[j] = array[i];
        }
        array[i] = pivot;
        return i;
    }


    /**
     * 前后遍历法做partition操作
     * 定义两个指针
     * @param array
     * @param left
     * @param right
     * @return
     */
    private static int partition3(int[] array, int left, int right) {
        int d = left + 1;
        int pivot = array[left];
        for (int i = left + 1; i <= right; i++) {
            if (array[i] < pivot) {
                swap(array, i, d);
                d++;
            }
        }
        swap(array, d - 1, left);
        return d - 1;
    }

    private static void swap(int[] array,int i,int j){
        int t = array[i];
        array[i] = array[j];
        array[j] = t;
    }
    public static void main(String[] args) {
        int[] array = {9,1,2,5,7,4,8,6,3,5};
        quickSort(array);
        System.out.println(Arrays.toString(array));
    }
}
